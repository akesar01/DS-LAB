#include <stdio.h>
#include <stdlib.h>
#include<conio.h>
int top=-1;
int stack[100];
int pop()
{
    if (top==-1)
        {printf("stack empty");
        getch();
        }
    else
        return stack[top--];

}
void push(int t)
{
    if (top==99)
        {  printf("stack full");
     getch();   }
    else
    {
        stack[++top]=t;
    }


}
int prec(char t)
{
    switch(t)
    {

        case '*':{return 8;
                    break;}
        case '/':return 8;
                  break;
        case '+':{return 7;
                   break;}
        case '-':return 7;
                  break;
        case '\0':{ return 0;
                   break;}

    }return 0;
}
void infix_to_postfix(char in_exp[])
{int x=0;
int y=0;
char t;
int z;
char c,a,post_exp[100];

t=in_exp[x];
push('\0');
while(t!='\0')
    {
        if(isalnum(t))
        {
            post_exp[y]=t;
            y++;
        }
        else if(t=='(')
               {
                   push('(');
               }
        else if(t==')')
        {
            while(stack[top]!='(')
            {
                c=pop();
                post_exp[y]=c;
                y++;
            }
            c=pop();

        }
        else
        {
            while(prec(t)<=prec(stack[top]))
            {
                c=pop();
                post_exp[y]=c;
                y++;
            }push(t);
        }x++;
        t=in_exp[x];
    }
    while(top!=-1)
    {
        c=pop();
        post_exp[y]=c;
        y++;
    }
printf("the equivalent postfix expression is : ");
for(z=0;z<y;z++)
    {
        printf("%c",post_exp[z]);

    }
}
int main()
{
char in[100];
    printf("give the expression\n");
    gets(in);
    infix_to_postfix(in);
    getch();
}

